// <auto-generated />
using System;
using ConsultaAlumnos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsultaAlumnos.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240127223254_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedProfessorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedProfessorId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Quarter")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Programación 3",
                            Quarter = "Tercer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programación 4",
                            Quarter = "Tercer"
                        });
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProfessorSubject", b =>
                {
                    b.Property<int>("ProfessorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProfessorsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("ProfessorSubject", (string)null);

                    b.HasData(
                        new
                        {
                            ProfessorsId = 4,
                            SubjectsId = 1
                        },
                        new
                        {
                            ProfessorsId = 5,
                            SubjectsId = 1
                        },
                        new
                        {
                            ProfessorsId = 4,
                            SubjectsId = 2
                        });
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectsAttendedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentsId", "SubjectsAttendedId");

                    b.HasIndex("SubjectsAttendedId");

                    b.ToTable("StudentsSubjectsAttended", (string)null);

                    b.HasData(
                        new
                        {
                            StudentsId = 1,
                            SubjectsAttendedId = 1
                        },
                        new
                        {
                            StudentsId = 1,
                            SubjectsAttendedId = 2
                        });
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Professor", b =>
                {
                    b.HasBaseType("ConsultaAlumnos.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Professor");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "nbologna31@gmail.com",
                            LastName = "Bologna",
                            Name = "Nicolas",
                            Password = "123456",
                            UserName = "nbologna_profesor"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ppaez@gmail.com",
                            LastName = "Paez",
                            Name = "Pablo",
                            Password = "123456",
                            UserName = "ppaez"
                        });
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("ConsultaAlumnos.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "nbologna31@gmail.com",
                            LastName = "Bologna",
                            Name = "Nicolas",
                            Password = "123456",
                            UserName = "nbologna_alumno"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Jperez@gmail.com",
                            LastName = "Perez",
                            Name = "Juan",
                            Password = "123456",
                            UserName = "jperez"
                        },
                        new
                        {
                            Id = 3,
                            Email = "pgarcia@gmail.com",
                            LastName = "Garcia",
                            Name = "Pedro",
                            Password = "123456",
                            UserName = "pgarcia"
                        });
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Question", b =>
                {
                    b.HasOne("ConsultaAlumnos.Domain.Entities.Professor", "AssignedProfessor")
                        .WithMany("Questions")
                        .HasForeignKey("AssignedProfessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConsultaAlumnos.Domain.Entities.Student", "Student")
                        .WithMany("Questions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConsultaAlumnos.Domain.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignedProfessor");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Response", b =>
                {
                    b.HasOne("ConsultaAlumnos.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConsultaAlumnos.Domain.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ProfessorSubject", b =>
                {
                    b.HasOne("ConsultaAlumnos.Domain.Entities.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConsultaAlumnos.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("ConsultaAlumnos.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConsultaAlumnos.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsAttendedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Question", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Professor", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ConsultaAlumnos.Domain.Entities.Student", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
